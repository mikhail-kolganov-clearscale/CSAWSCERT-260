AWSTemplateFormatVersion: 2010-09-09
Description: Kolganov - test CI/CD (CodePipeline/CodeBuild) CSAWSCERT-260
# Base AWS tutorial: https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-cloudformation-codecommit.html

Parameters:

  # ProjectNamePrefix:
  #   Type: String
  #   Description: Specify the prefix name for CodePipeline and CodeBuild resouirces
  #   Default: kolganov-csawscert-260

  CodeCommitRepositoryName:
    Description: CodeComit repository name
    Type: String
    Default: kolganov-CSAWSCERT-260

  CodeCommitBranchName:
    Description: CodeCommit branch name
    Type: String
    Default: master

  CodeBuildComputeType:
    Type: String
    Default: BUILD_GENERAL1_SMALL
    Description: Compute instance type for the CodeBuild Project
  
Resources:

  #S3 Bucket for storing Artifacts for CodePipeline and CodeBuild
  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'


# Lambda role for cleaning S3 bucket
  ClearS3BucketLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - "logs:*"
            Resource: '*'
          - Effect: Allow
            Action:
              - "s3:*"
            Resource:
              - !Sub "${CodePipelineArtifactStoreBucket.Arn}"
              - !Sub "${CodePipelineArtifactStoreBucket.Arn}/*"


  ClearS3BucketLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Timeout: 5
      Handler: index.handler
      Role: !GetAtt ClearS3BucketLambdaFunctionRole.Arn
      Code:
        ZipFile: |
              import json
              import boto3
              from botocore.vendored import requests
              import cfnresponse

              def handler(event, context):
                  responseData = {}
                  
                  if 'PhysicalResourceId' in event :
                    ResourceId = event['PhysicalResourceId']
                  else:
                    ResourceId = 'ClearS3BucketLambdaFunction'

                  if event['RequestType'] == 'Create':
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, ResourceId)

                  try:
                      bucket = event['ResourceProperties']['BucketName']

                      if event['RequestType'] == 'Delete':
                          s3 = boto3.resource('s3')
                          bucket = s3.Bucket(bucket)
                          for obj in bucket.objects.filter():
                              s3.Object(bucket.name, obj.key).delete()

                      #responseData['Data'] = str("Cleaning S3 bucket {bkt}").format(bkt=bucket)

                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, ResourceId)
                  except Exception as e:
                      print(e)
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, ResourceId)   

# Custom action for cleaning the S3 bucket
  cleanupS3BucketOnDelete:
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken: !GetAtt ClearS3BucketLambdaFunction.Arn
      BucketName: !Ref CodePipelineArtifactStoreBucket

#EventBridge config for tracking changes of CodeCommit repo
  AmazonCloudWatchEventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'codepipeline:StartPipelineExecution'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:codepipeline:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref myPipeline


  AmazonCloudWatchEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Join 
            - ''
            - - 'arn:aws:codecommit:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref CodeCommitRepositoryName   # Here we specify the CodeCommit repo name (via the InputParameter)
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - master
      Targets:
        - Arn: !Join 
            - ''
            - - 'arn:aws:codepipeline:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':'
              - !Ref myPipeline
          RoleArn: !GetAtt 
            - AmazonCloudWatchEventRole
            - Arn
          Id: codepipeline-AppPipeline


#CodePipeline with three stages: Source, Build, Depoloy
  myPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      # Name: !Sub "${ProjectNamePrefix}-pipeline"
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:

        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                BranchName: !Ref CodeCommitBranchName
                RepositoryName: !Ref CodeCommitRepositoryName
                PollForSourceChanges: false
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: Build_with_CodeBuild
              InputArtifacts:
                - Name: SourceArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              RunOrder: 1
              Configuration:
                BatchEnabled: 'false'
                CombineArtifacts: 'false'
                ProjectName: !Ref CodeBuildProject
                PrimarySource: SourceArtifact
                EnvironmentVariables: '[{"name":"DOCKERHUB_USERNAME","value":"test-kolganov-dockerhub:username","type":"SECRETS_MANAGER"},{"name":"DOCKERHUB_PASSWORD","value":"test-kolganov-dockerhub:password","type":"SECRETS_MANAGER"}]'
                # - name: ECS_CONTAINER_NAME
                #   value: !ImportValue kolganovEcsContainerName
                #   type: PLAINTEXT
              OutputArtifacts:
                - Name: BuildArtifact

        - Name: Deploy
          Actions:
            - Name: DeployECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              RunOrder: 1
              Configuration:
                ClusterName: !ImportValue kolganovEcsClusterName
                ServiceName: !ImportValue kolganovEcsServiceName
                FileName: imagedefinitions.json
                DeploymentTimeout: '10'
              OutputArtifacts: []
              InputArtifacts:
                - Name: BuildArtifact
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket



  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-ServiceRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "${CodePipelineArtifactStoreBucket.Arn}"
                  - !Sub "${CodePipelineArtifactStoreBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecs:List*'
                  - 'ecs:Describe*'
                  - 'ecs:Tag*'
                  - 'ecs:Untag*'
                  - 'ecs:RegisterTaskDefinition'    #100% needed
                  - 'ecs:DeregisterTaskDefinition'
                Resource: '*'
              - Effect: Allow
                Action:
                - "ecs:*"
                Resource:
                  - Fn::Sub:
                    - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-set/${EcsClusterName}/*/*"
                    - EcsClusterName: !ImportValue kolganovEcsClusterName

                  - Fn::Sub:
                    - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${EcsClusterName}"
                    - EcsClusterName: !ImportValue kolganovEcsClusterName

                  - Fn::Sub:
                    - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/${EcsClusterName}/*"
                    - EcsClusterName: !ImportValue kolganovEcsClusterName

                  - Fn::Sub:
                    - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${EcsClusterName}/${ServiceName}"
                    - EcsClusterName: !ImportValue kolganovEcsClusterName
                      ServiceName: !ImportValue kolganovEcsServiceName

                  - Fn::Sub:
                    - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/${EcsClusterName}/*"
                    - EcsClusterName: !ImportValue kolganovEcsClusterName

                  - Fn::Sub: 
                    - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:${TaskDefNameRef}:*"
                    - TaskDefNameRef: !Select [ 5, !Split [":", !ImportValue kolganovEcsTaskDefName ]]

  
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: !Ref CodeBuildComputeType #BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        #EnvironmentVariables: '[{"name":"DOCKERHUB_USERNAME","value":"test-kolganov-dockerhub:username","type":"SECRETS_MANAGER"},{"name":"DOCKERHUB_PASSWORD","value":"test-kolganov-dockerhub:password","type":"SECRETS_MANAGER"}]'

        EnvironmentVariables:
          - Name: DOCKERHUB_USERNAME
            Value: test-kolganov-dockerhub:username
            Type: SECRETS_MANAGER
          - Name: DOCKERHUB_PASSWORD
            Value: test-kolganov-dockerhub:password
            Type: SECRETS_MANAGER

        PrivilegedMode: 'true'

      Source:
        Type: CODEPIPELINE

      TimeoutInMinutes: 5

      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref CodeBuildLogGroup


  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 1
      Tags:
      - Key: "CreatedBy"
        Value: "Mikhail.Kolganov"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"

      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                Effect: Allow
                Resource:
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CodeBuildLogGroup}"
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CodeBuildLogGroup}:*"
              
              - Action:
                - "secretsmanager:GetSecretValue"
                Effect: Allow
                Resource:
                - "arn:aws:secretsmanager:us-east-1:992536150469:secret:test-kolganov-dockerhub-AwyCaT"

              - Action:
                - 'logs:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                Effect: Allow
                Resource: '*'

              - Action:
                - "s3:PutObject"
                - "s3:GetObject"
                - "s3:GetObjectVersion"
                - "s3:GetBucketAcl"
                - "s3:GetBucketLocation"
                Effect: Allow
                Resource:
                - !Sub "${CodePipelineArtifactStoreBucket.Arn}"
                - !Sub "${CodePipelineArtifactStoreBucket.Arn}/*"

  
Outputs:
  OutKolganovCodeBuildProject:
    Value: !Ref CodeBuildProject
    Export:
      Name: OutKolganovCodeBuildProject