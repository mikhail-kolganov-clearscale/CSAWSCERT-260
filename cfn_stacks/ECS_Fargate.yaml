AWSTemplateFormatVersion: 2010-09-09
Description: Test ECS cluster for CSAWSCERT-260
  
Parameters:
  EcsClusterName:
    Type: String
    Default: kolganov-cfn-ECS-CSAWSCERT-260

  ContainerName:
    Type: String
    Default: my-test-http-python
    Description: The name of the ECS Container within the ECS Task

  ContainerPort:
    Type: Number
    Default: 8080
    Description: TCP port on which the ECS container will be listenning

  AllowedSrcIP:
    Type: String
    Default: 52.8.5.26/32
    Description: Source IP from where connections are allowed to the ECS container

Resources:

  ECScluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE_SPOT
        - FARGATE
      ClusterName: !Ref EcsClusterName
      Tags:
      - Key: "CreatedBy"
        Value: "Mikhail.Kolganov"




  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Kolganov ECS Security Group for CSAWSCERT-260
      VpcId: !ImportValue kolganovEcsVPC

  EcsSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      CidrIp: !Ref AllowedSrcIP

  EcsTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'

  HelloWorldTaskDef:
    Type: AWS::ECS::TaskDefinition
    # DependsOn:
    #   - "EcsTaskRole"
    Properties:
      RequiresCompatibilities:
      - "EC2"
      - "FARGATE"
      NetworkMode: awsvpc
      RuntimePlatform:
        OperatingSystemFamily: LINUX
        CpuArchitecture: X86_64
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        # -
        #   Name: "test-hello-world"
        #   Cpu: 256
        #   Memory: 512
        #   Image: "tutum/hello-world"
        - Name: !Ref ContainerName    #"my-test-http-python"
          Image: 992536150469.dkr.ecr.us-east-1.amazonaws.com/kolganov-csawscert-260:2292983


  HelloWorldService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECScluster
      TaskDefinition: !Ref HelloWorldTaskDef
      DesiredCount: 1
      # LaunchType: "FARGATE"
      CapacityProviderStrategy: 
      - CapacityProvider: "FARGATE_SPOT"
        Weight: 1
      
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
          - !ImportValue kolganovEcsSubnet01
          - !ImportValue kolganovEcsSubnet02
          SecurityGroups: 
          - !Ref EcsSecurityGroup



Outputs:

  OutTaskDefName:
    Value: !Ref ContainerName
    Export:
      Name: kolganovEcsContainerName

  OutEcsClusterName:
    Value: !Ref ECScluster
    Export:
      Name: kolganovEcsClusterName

  OutEcsClusterService:
    Value: !GetAtt HelloWorldService.Name
    Export:
      Name: kolganovEcsServiceName