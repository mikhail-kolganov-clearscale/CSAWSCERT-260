AWSTemplateFormatVersion: "2010-09-09"
Description: VPC Creation with two public subnets
  
Parameters:
  VPCCidr:
    Default: 10.0.0.0/24
    Type: String
    Description: Specify the VPC CIDR block according

  Environment:
    Default: test
    Type: String
    Description: Enter the Environment name

  Company:
    Default: CSAWSCERT-260
    Type: String
    Description: Enter the Company name

  AvailabilityZonesList:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Specify TWO availability zones


  CreateVpcEndpoints:
    Description: Whether we should create PrivateLink VPC Enpoints (ecs/ecr/s3/logs)
    Default: true
    Type: String
    AllowedValues: [true, false]

  CreateNatGW:
    Description: Whether we should create NatGW and route trafic of private networks via the NATGW
    Default: false
    Type: String
    AllowedValues: [true, false]

  CreateNatGwInBothPublicSubnets:
    Description: Whether we should create two NatGWs, one in each public subnet
    Default: false
    Type: String
    AllowedValues: [true, false]

  PlaceVpcEnpointsIntoSingleSubnet:
    Description: Whether we should put VPC Endpoints into both private subnets or just into one (for cost saving)
    Default: false
    Type: String
    AllowedValues: [true, false]

  # AlbPort:
  #   Type: Number
  #   Default: 80
  #   Description: TCP port on which the ECS container will be listenning

  # AllowedSrcIP:
  #   Type: String
  #   Default: 52.8.5.26/32
  #   Description: Source IP from where connections are allowed to the ECS container


Conditions:
  ShouldCreateVPCendpoints:
    !Equals [true, !Ref CreateVpcEndpoints]

  ShouldCreateNATGW:
    !Equals [true, !Ref CreateNatGW]
  
  UseSingleSubnetForVPCendpoints:
    !Equals [true, !Ref PlaceVpcEnpointsIntoSingleSubnet]

#Create a second NatGW only if CreateNatGw=true and CreateNatGwInBothPublicSubnets=true
  CreateSecondNatGW: !And
        - !Equals [true, !Ref CreateNatGW]
        - !Equals [true, !Ref CreateNatGwInBothPublicSubnets]

  UseOnlyOneNatGW: !And
        - !Equals [true, !Ref CreateNatGW]
        - !Equals [false, !Ref CreateNatGwInBothPublicSubnets]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags:
        - Key: Name
          Value: !Sub
          - ${ENV}-${COMP}-${RESOURCE}
          - ENV:  !Ref Environment
            COMP: !Ref Company
            RESOURCE: 'VPC'
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
          - ${ENV}-${COMP}-${RESOURCE}
          - ENV:  !Ref Environment
            COMP: !Ref Company
            RESOURCE: 'IGW'
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"

  IGWtoVPCattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  DefRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
          - ${ENV}-${COMP}-${RESOURCE}
          - ENV:  !Ref Environment
            COMP: !Ref Company
            RESOURCE: 'PublicRouteTable'
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"
      VpcId: !Ref VPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
          - ${ENV}-${COMP}-${RESOURCE}
          - ENV:  !Ref Environment
            COMP: !Ref Company
            RESOURCE: 'PrivateRouteTable1'
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"
      VpcId: !Ref VPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
          - ${ENV}-${COMP}-${RESOURCE}
          - ENV:  !Ref Environment
            COMP: !Ref Company
            RESOURCE: 'PrivateRouteTable2'
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"
      VpcId: !Ref VPC

  NatGW1:
    Type: AWS::EC2::NatGateway
    Condition: ShouldCreateNATGW
    Properties: 
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet1
      Tags: 
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"

  NatGW2:
    Type: AWS::EC2::NatGateway
    Condition: CreateSecondNatGW
    Properties: 
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet2
      Tags: 
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"

  NATGWRoute1:
    Type: AWS::EC2::Route
    Condition: ShouldCreateNATGW
    Properties:
      NatGatewayId: !Ref NatGW1
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  NATGWRoute2viaNatGW1:
    Type: AWS::EC2::Route
    Condition: UseOnlyOneNatGW
    Properties:
      NatGatewayId: !Ref NatGW1
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0

  NATGWRoute2viaNatGW2:
    Type: AWS::EC2::Route
    Condition: CreateSecondNatGW
    Properties:
      NatGatewayId: !Ref NatGW2
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0


  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref AvailabilityZonesList]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 4, 5 ] ]
      Tags:
        - Key: Name
          Value: !Sub
          - ${ENV}-${COMP}-${RESOURCE}-${AZ}
          - ENV:  !Ref Environment
            COMP: !Ref Company
            RESOURCE: 'PrivateSubnet1'
            AZ: !Select [0, !Ref AvailabilityZonesList]
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"
      VpcId: !Ref VPC

  PribateSubnet1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref AvailabilityZonesList]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 4, 5 ] ]
      Tags:
        - Key: Name
          Value: !Sub
          - ${ENV}-${COMP}-${RESOURCE}-${AZ}
          - ENV:  !Ref Environment
            COMP: !Ref Company
            RESOURCE: 'PublicSubnet1'
            AZ: !Select [0, !Ref AvailabilityZonesList]
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"
      VpcId: !Ref VPC

  Subnet1DefRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DefRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !Ref AvailabilityZonesList]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 4, 5 ] ]
      Tags:
        - Key: Name
          Value: !Sub
          - ${ENV}-${COMP}-${RESOURCE}-${AZ}
          - ENV:  !Ref Environment
            COMP: !Ref Company
            RESOURCE: 'PrivateSubnet2'
            AZ: !Select [0, !Ref AvailabilityZonesList]
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"
      VpcId: !Ref VPC

  PribateSubnet2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !Ref AvailabilityZonesList]
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 4, 5 ] ]
      Tags:
        - Key: Name
          Value: !Sub
          - ${ENV}-${COMP}-${RESOURCE}-${AZ}
          - ENV:  !Ref Environment
            COMP: !Ref Company
            RESOURCE: 'PublicSubnet2'
            AZ: !Select [1, !Ref AvailabilityZonesList]
        - Key: "CreatedBy"
          Value: "Mikhail.Kolganov"
      VpcId: !Ref VPC



  Subnet2DefRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DefRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref IGW
      RouteTableId: !Ref DefRouteTable
      DestinationCidrBlock: 0.0.0.0/0


  VPCEndpointSG:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: ShouldCreateVPCendpoints
    Properties:
      GroupDescription: Kolganov - SecGroup for VPC Endpoints
      VpcId: !Ref VPC

  VPCEndpointHTTPSinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: ShouldCreateVPCendpoints
    Properties:
      GroupId: !Ref VPCEndpointSG
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref VPCCidr


  CfnVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVPCendpoints
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.cloudformation"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds: !If 
        - UseSingleSubnetForVPCendpoints
        - - !Ref PrivateSubnet1
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG

  EcsAgentEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVPCendpoints
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecs-agent"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds: !If 
        - UseSingleSubnetForVPCendpoints
        - - !Ref PrivateSubnet1
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

        # - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSG


  EcsTelemetryEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVPCendpoints
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecs-telemetry"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds: !If 
        - UseSingleSubnetForVPCendpoints
        - - !Ref PrivateSubnet1
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG


  EcsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVPCendpoints
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecs"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds: !If 
        - UseSingleSubnetForVPCendpoints
        - - !Ref PrivateSubnet1
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG


  EcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVPCendpoints
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.dkr"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds: !If 
        - UseSingleSubnetForVPCendpoints
        - - !Ref PrivateSubnet1
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG


  EcrApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVPCendpoints
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.api"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds: !If 
        - UseSingleSubnetForVPCendpoints
        - - !Ref PrivateSubnet1
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG


  CwLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: ShouldCreateVPCendpoints
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds: !If 
        - UseSingleSubnetForVPCendpoints
        - - !Ref PrivateSubnet1
        - - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG


  GwEndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: ShouldCreateVPCendpoints
    Properties:
      RouteTableIds:
      - !Ref PrivateRouteTable
      - !Ref PrivateRouteTable2
      - !Ref DefRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
      VpcEndpointType: Gateway


Outputs:

  OutVpc:
    Value: !Ref VPC
    Export:
      Name: kolganovEcsVPC

  OutPrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: kolganovEcsSubnet01

  OutPrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: kolganovEcsSubnet02

  OutPublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: kolganovAlbSubnet01

  OutPublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: kolganovAlbSubnet02


